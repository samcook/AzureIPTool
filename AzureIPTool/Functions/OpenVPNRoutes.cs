using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Sockets;
using AzureIPRanges;

namespace AzureIPTool.Functions
{
	public class OpenVPNRoutes : IAzureIPToolFunction
	{
		private static readonly Func<IPNetwork, string> OpenVPNPushRouteFormatFunc = x => $"push \"route {x.Network} {x.Netmask}\"";
		private static readonly AddressFamily[] DefaultAddressFamilies = { AddressFamily.InterNetwork };

		private readonly IAzureIPRangesParser parser;
		private readonly string[] serviceTagIds;
		private readonly Func<IPNetwork, string> pushRouteFormatFunc;
		private readonly AddressFamily[] addressFamilies;

		public OpenVPNRoutes(IAzureIPRangesParser parser, string[] serviceTagIds, Func<IPNetwork, string> pushRouteFormatFunc = null, AddressFamily[] addressFamilies = null)
		{
			this.parser = parser;
			this.serviceTagIds = serviceTagIds;
			this.pushRouteFormatFunc = pushRouteFormatFunc ?? OpenVPNPushRouteFormatFunc;
			this.addressFamilies = addressFamilies ?? DefaultAddressFamilies;
		}

		public void Execute()
		{
			Console.WriteLine("; Generated by AzureIPTool - https://github.com/samcook/AzureIPTool");
			Console.WriteLine();

			foreach (var serviceTagId in this.serviceTagIds)
			{
				PrintNetworksForServiceTag(serviceTagId);
			}

			CheckForServiceTagOverlap();
		}

		private void PrintNetworksForServiceTag(string serviceTagId)
		{
			var ipNetworks = this.parser.GetIPNetworksForServiceTag(serviceTagId, this.addressFamilies);

			Console.WriteLine($"; {serviceTagId} ({this.parser.FileName})");

			foreach (var ipNetwork in ipNetworks)
			{
				Console.WriteLine(this.pushRouteFormatFunc(ipNetwork));
			}

			Console.WriteLine();
		}

		private void CheckForServiceTagOverlap()
		{
			var seenIPNetworks = new Dictionary<string, List<IPNetwork>>();

			foreach (var serviceTagId in this.serviceTagIds)
			{
				var ipNetworks = this.parser.GetIPNetworksForServiceTag(serviceTagId, this.addressFamilies).ToList();

				foreach (var ipNetwork in ipNetworks)
				{
					foreach (var (seenServiceTagId, seenServiceTagIPNetworks) in seenIPNetworks)
					{
						foreach (var seenServiceTagIPNetwork in seenServiceTagIPNetworks)
						{
							if (seenServiceTagIPNetwork.Overlap(ipNetwork))
							{
								Console.WriteLine($"; {ipNetwork} ({serviceTagId}) overlaps {seenServiceTagIPNetwork} ({seenServiceTagId})");
							}

						}
					}
				}

				seenIPNetworks.Add(serviceTagId, ipNetworks);
			}
		}
	}
}
